"""
Django settings for task project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'drf_yasg',
    'rest_framework',
    'rest_framework_simplejwt',
    'Users',
    'Tasks',
    
    # Requis par allauth :
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Ajoutez les fournisseurs spécifiques que vous voulez utiliser :
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    
    #pour reinitialiser le mot passe
    'rest_framework.authtoken', # Nécessaire pour dj-rest-auth
    'dj_rest_auth',
]

SITE_ID = 1

# URL de votre frontend pour la réinitialisation du mot de passe
PASSWORD_RESET_CONFIRM_URL = 'http://localhost:3000/reset-password/confirm/{uid}/{token}/'

REST_AUTH = {
    'OLD_PASSWORD_FIELD_ENABLED': True,
    'PASSWORD_RESET_USE_SITES_DOMAIN': False,
    # *** TRÈS IMPORTANT : Le chemin doit correspondre à l'emplacement de ton utils.py ***
    'PASSWORD_RESET_URL_GENERATOR': 'Users.utils.custom_password_reset_url_generator', # OU 'Tasks.utils.custom_password_reset_url_generator' si tu l'as mis là
}

ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_SIGNUP_FIELDS = ['email*']

AUTH_USER_MODEL = 'Users.Masters'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'allauth.account.middleware.AccountMiddleware',
    
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Port de votre frontend Next.js
    "http://192.168.1.67:3000", # l'IP et le port de votre serveur de développement Next.js
]

SOCIALACCOUNT_PROVIDERS = {
    
    'google': {
        
        'APP': {
            
            'client_id': os.getenv('GOOGLE_CLIENT_ID'),
            'secret': os.getenv('GOOGLE_CLIENT_SECRET'),
            
        },
        'SCOPE': ['profile', 'email'],  # Les scopes que vous souhaitez demander
        'AUTH_PARAMS': {'access_type': 'online'},  # Paramètres d'authentification supplémentaires
        'METHOD': 'oauth2',  # Méthode d'authentification
        'VERIFIED_EMAIL': True,  # Vérifier les emails
    },
    
    'github': {
        
        'APP': {
            
            'client_id': os.getenv('GITHUB_CLIENT_ID'),
            'secret': os.getenv('GITHUB_CLIENT_SECRET'),
        
        }
    }
}

SOCIALACCOUNT_LOGIN_ON_GET = True  # Pour permettre la connexion via GET

ROOT_URLCONF = 'task.urls'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    )
}

from datetime import timedelta 

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=1440), 
    "REFRESH_TOKEN_LIFETIME": timedelta(days=365),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',), # Format de l'en-tête Authorization
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


AUTHENTICATION_BACKENDS = [
    
    'django.contrib.auth.backends.ModelBackend',  # Backend Django par défaut
    
    'allauth.account.auth_backends.AuthenticationBackend', # Pour la gestion des comptes allauth
]



# Les clés SOCIAL_AUTH pour Google et GitHub sont supprimées

# URLs de redirection
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/home/'  # Page après connexion
LOGOUT_URL = '/logout/'
LOGOUT_REDIRECT_URL = '/login/'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        # Les loggers pour social_django et social_core sont supprimés
        'django': { # Exemple de logger qui pourrait rester
            'handlers': ['console'],
            'level': 'INFO', # Ajustez le niveau selon vos besoins
        }
    },
}

# SOCIAL_AUTH_PIPELINE est supprimé car social_django n'est plus utilisé


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_USER')
 
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_USER')



# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Pour tester

WSGI_APPLICATION = 'task.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'Africa/Libreville'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
